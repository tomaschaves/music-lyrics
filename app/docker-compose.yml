version: '3.9'
services:
  # frontend:
  #   container_name: music_lyrics_frontend
  #   build: ./frontend
  #   ports:
  #     - 3000:3000
  #   working_dir: /music-lyrics-frontend
  #       # Os `healthcheck` devem garantir que a aplicação
  #   # está operacional, antes de liberar o container
  #   healthcheck:
  #     test: ["CMD", "lsof", "-t", "-i:3000"]  # Caso utilize outra porta interna para o front, altere ela aqui também
  #     timeout: 10s
  #     retries: 5
  backend:
    container_name: music_lyrics_backend
    build: ./backend
    ports:
      - 3001:3001
    working_dir: /music-lyrics-backend
    # Caso queira que o container esteja atualizado durante o desenvolvimento, sem que você precise ficar fazendo down e up dos containers, descomente as 3 linhas abaixo
    command: npm run dev
    volumes: 
      - ./backend/src:/music-lyrics-backend/src
    depends_on:
      db:
        condition: service_healthy
    environment:
      - APP_PORT=3001
      - JWT_SECRET=jwt_secret
      # Os dados abaixo se referem ao container `db`
      # Dica: Relembre aqui da comunicação interna entre containers
      - MYSQL_USER=root
      - MYSQL_PASSWORD=music-lyrics
      - MYSQL_HOST=db
      - MYSQL_PORT=3306
      - MYSQL_DATABASE=lyrics
    healthcheck:
      test: ["CMD", "lsof", "-t", "-i:3001"] # Caso utilize outra porta interna para o back, altere ela aqui também
      timeout: 10s
      retries: 5
  db:
    image: mysql:8.0.32
    container_name: music_lyrics_db
    ports:
      - 3306:3306
    environment:
      - MYSQL_ROOT_PASSWORD=music-lyrics
    restart: 'always'
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"] # Deve aguardar o banco ficar operacional
      timeout: 10s
      retries: 5
    cap_add:
      - SYS_NICE # Deve omitir alertas menores

